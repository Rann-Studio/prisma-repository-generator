{
  "version": 3,
  "sources": ["../esm/index.js"],
  "sourcesContent": ["import { Prisma } from \"@prisma/client\";\nimport fs from \"fs\";\nimport Handlebars from \"handlebars\";\nimport path from \"path\";\nimport prettier from \"prettier\";\nimport { lowerCaseFirst } from \"./utils/helper.js\";\n// Save repository file to the file system with formatting\nconst saveRepository = async (repo, content) => {\n    const repositoriesDir = path.resolve(process.cwd(), \"generated_repositories\");\n    if (!fs.existsSync(repositoriesDir)) {\n        fs.mkdirSync(repositoriesDir);\n    }\n    const formattedCode = await prettier.format(content, {\n        parser: \"typescript\",\n        semi: true,\n        singleQuote: true,\n        useTabs: true,\n        tabWidth: 4,\n    });\n    const filePath = path.resolve(repositoriesDir, `${lowerCaseFirst(repo)}.repository.ts`);\n    fs.writeFileSync(filePath, formattedCode, \"utf8\");\n    console.log(`Saved: ${filePath}`);\n};\nconst savePrismaUtils = async () => {\n    const repositoriesDir = path.resolve(process.cwd(), \"generated_repositories\");\n    if (!fs.existsSync(repositoriesDir)) {\n        fs.mkdirSync(repositoriesDir);\n    }\n    const prismaUtilsContent = `import { PrismaClient } from \"@prisma/client\"; export const client = new PrismaClient();`;\n    const formattedCode = await prettier.format(prismaUtilsContent, {\n        parser: \"typescript\",\n        semi: true,\n        singleQuote: true,\n        useTabs: true,\n        tabWidth: 4,\n    });\n    const filePath = path.resolve(repositoriesDir, `prisma.utils.ts`);\n    fs.writeFileSync(filePath, formattedCode, \"utf8\");\n    console.log(`Saved: ${filePath}`);\n};\nconst compileTemplate = (templateFile) => {\n    const templatePath = path.resolve(__dirname, \"../template\", templateFile);\n    const templateSource = fs.readFileSync(templatePath, \"utf8\");\n    return Handlebars.compile(templateSource, { noEscape: true });\n};\nexport const generateRepositories = async () => {\n    // Safety check to ensure Prisma DMMF is initialized\n    if (!Prisma.dmmf || !Prisma.dmmf.datamodel) {\n        throw new Error(\"Prisma.dmmf or Prisma.dmmf.datamodel is not available. Make sure you run `prisma generate` after setting up your schema.\");\n    }\n    const models = Prisma.dmmf.datamodel.models;\n    const template = compileTemplate(\"repository.hbs\");\n    for (const model of models) {\n        const content = template({\n            repo: model.name,\n            table: lowerCaseFirst(model.name),\n        });\n        await saveRepository(model.name, content);\n    }\n    await savePrismaUtils();\n    console.log(\"Repositories generated successfully.\");\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAuB;AACvB,gBAAe;AACf,wBAAuB;AACvB,kBAAiB;AACjB,sBAAqB;AACrB,oBAA+B;AAE/B,MAAM,iBAAiB,8BAAO,MAAM,YAAY;AAC5C,QAAM,kBAAkB,YAAAA,QAAK,QAAQ,QAAQ,IAAI,GAAG,wBAAwB;AAC5E,MAAI,CAAC,UAAAC,QAAG,WAAW,eAAe,GAAG;AACjC,cAAAA,QAAG,UAAU,eAAe;AAAA,EAChC;AACA,QAAM,gBAAgB,MAAM,gBAAAC,QAAS,OAAO,SAAS;AAAA,IACjD,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,aAAa;AAAA,IACb,SAAS;AAAA,IACT,UAAU;AAAA,EACd,CAAC;AACD,QAAM,WAAW,YAAAF,QAAK,QAAQ,iBAAiB,OAAG,8BAAe,IAAI,CAAC,gBAAgB;AACtF,YAAAC,QAAG,cAAc,UAAU,eAAe,MAAM;AAChD,UAAQ,IAAI,UAAU,QAAQ,EAAE;AACpC,GAfuB;AAgBvB,MAAM,kBAAkB,mCAAY;AAChC,QAAM,kBAAkB,YAAAD,QAAK,QAAQ,QAAQ,IAAI,GAAG,wBAAwB;AAC5E,MAAI,CAAC,UAAAC,QAAG,WAAW,eAAe,GAAG;AACjC,cAAAA,QAAG,UAAU,eAAe;AAAA,EAChC;AACA,QAAM,qBAAqB;AAC3B,QAAM,gBAAgB,MAAM,gBAAAC,QAAS,OAAO,oBAAoB;AAAA,IAC5D,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,aAAa;AAAA,IACb,SAAS;AAAA,IACT,UAAU;AAAA,EACd,CAAC;AACD,QAAM,WAAW,YAAAF,QAAK,QAAQ,iBAAiB,iBAAiB;AAChE,YAAAC,QAAG,cAAc,UAAU,eAAe,MAAM;AAChD,UAAQ,IAAI,UAAU,QAAQ,EAAE;AACpC,GAhBwB;AAiBxB,MAAM,kBAAkB,wBAAC,iBAAiB;AACtC,QAAM,eAAe,YAAAD,QAAK,QAAQ,WAAW,eAAe,YAAY;AACxE,QAAM,iBAAiB,UAAAC,QAAG,aAAa,cAAc,MAAM;AAC3D,SAAO,kBAAAE,QAAW,QAAQ,gBAAgB,EAAE,UAAU,KAAK,CAAC;AAChE,GAJwB;AAKjB,MAAM,uBAAuB,mCAAY;AAE5C,MAAI,CAAC,qBAAO,QAAQ,CAAC,qBAAO,KAAK,WAAW;AACxC,UAAM,IAAI,MAAM,0HAA0H;AAAA,EAC9I;AACA,QAAM,SAAS,qBAAO,KAAK,UAAU;AACrC,QAAM,WAAW,gBAAgB,gBAAgB;AACjD,aAAW,SAAS,QAAQ;AACxB,UAAM,UAAU,SAAS;AAAA,MACrB,MAAM,MAAM;AAAA,MACZ,WAAO,8BAAe,MAAM,IAAI;AAAA,IACpC,CAAC;AACD,UAAM,eAAe,MAAM,MAAM,OAAO;AAAA,EAC5C;AACA,QAAM,gBAAgB;AACtB,UAAQ,IAAI,sCAAsC;AACtD,GAhBoC;",
  "names": ["path", "fs", "prettier", "Handlebars"]
}
