{
  "version": 3,
  "sources": ["../esm/index.js"],
  "sourcesContent": ["import { Prisma } from \"@prisma/client\";\nimport { existsSync, mkdirSync, readFileSync, writeFileSync } from \"fs\";\nimport Handlebars from \"handlebars\";\nimport { resolve } from \"path\";\nimport { format } from \"prettier\";\nfunction lowerCaseFirst(str) {\n    return str.charAt(0).toLocaleLowerCase() + str.slice(1);\n}\nfunction ensureDirectoryExists(dirPath) {\n    if (!existsSync(dirPath)) {\n        mkdirSync(dirPath, { recursive: true });\n    }\n}\nfunction saveFile(filePath, content, overwrite) {\n    if (existsSync(filePath) && overwrite === false) {\n        console.log(`Skipped: ${filePath} already exists.`);\n        return;\n    }\n    writeFileSync(filePath, content, \"utf8\");\n    console.log(`Saved: ${filePath}`);\n}\nasync function formatCode(content) {\n    return await format(content, {\n        parser: \"typescript\",\n        semi: true,\n        singleQuote: true,\n        useTabs: true,\n        tabWidth: 4,\n    });\n}\nfunction compileTemplate() {\n    const templatePath = resolve(__dirname, \"..\", \"template\", \"template.hbs\");\n    const templateSource = readFileSync(templatePath, \"utf8\");\n    return Handlebars.compile(templateSource, { noEscape: true });\n}\nasync function savePrismaUtils(overwrite) {\n    const dir = resolve(process.cwd(), \"generated_repositories\");\n    ensureDirectoryExists(dir);\n    const content = `import { PrismaClient } from \"@prisma/client\"; export const client = new PrismaClient();`;\n    const formattedCode = await formatCode(content);\n    const filePath = resolve(dir, \"prisma.utils.ts\");\n    saveFile(filePath, formattedCode, overwrite);\n}\nasync function saveRepository(repo, content, overwrite) {\n    const dir = resolve(process.cwd(), \"generated_repositories\");\n    ensureDirectoryExists(dir);\n    const formattedCode = await formatCode(content);\n    const filePath = resolve(dir, `${lowerCaseFirst(repo)}.repository.ts`);\n    saveFile(filePath, formattedCode, overwrite);\n}\nexport async function generateRepositories(overwrite = false) {\n    if (!Prisma.dmmf?.datamodel) {\n        throw new Error(`Run \"npx prisma migrate dev --name init\" to ensure schema is initialized.`);\n    }\n    const models = Prisma.dmmf.datamodel.models;\n    const template = compileTemplate();\n    for (const model of models) {\n        const content = template({\n            repo: model.name,\n            table: lowerCaseFirst(model.name),\n        });\n        await saveRepository(model.name, content, overwrite);\n    }\n    await savePrismaUtils(overwrite);\n    console.log(\"Repositories generated successfully.\");\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAuB;AACvB,gBAAmE;AACnE,wBAAuB;AACvB,kBAAwB;AACxB,sBAAuB;AACvB,SAAS,eAAe,KAAK;AACzB,SAAO,IAAI,OAAO,CAAC,EAAE,kBAAkB,IAAI,IAAI,MAAM,CAAC;AAC1D;AAFS;AAGT,SAAS,sBAAsB,SAAS;AACpC,MAAI,KAAC,sBAAW,OAAO,GAAG;AACtB,6BAAU,SAAS,EAAE,WAAW,KAAK,CAAC;AAAA,EAC1C;AACJ;AAJS;AAKT,SAAS,SAAS,UAAU,SAAS,WAAW;AAC5C,UAAI,sBAAW,QAAQ,KAAK,cAAc,OAAO;AAC7C,YAAQ,IAAI,YAAY,QAAQ,kBAAkB;AAClD;AAAA,EACJ;AACA,+BAAc,UAAU,SAAS,MAAM;AACvC,UAAQ,IAAI,UAAU,QAAQ,EAAE;AACpC;AAPS;AAQT,eAAe,WAAW,SAAS;AAC/B,SAAO,UAAM,wBAAO,SAAS;AAAA,IACzB,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,aAAa;AAAA,IACb,SAAS;AAAA,IACT,UAAU;AAAA,EACd,CAAC;AACL;AARe;AASf,SAAS,kBAAkB;AACvB,QAAM,mBAAe,qBAAQ,WAAW,MAAM,YAAY,cAAc;AACxE,QAAM,qBAAiB,wBAAa,cAAc,MAAM;AACxD,SAAO,kBAAAA,QAAW,QAAQ,gBAAgB,EAAE,UAAU,KAAK,CAAC;AAChE;AAJS;AAKT,eAAe,gBAAgB,WAAW;AACtC,QAAM,UAAM,qBAAQ,QAAQ,IAAI,GAAG,wBAAwB;AAC3D,wBAAsB,GAAG;AACzB,QAAM,UAAU;AAChB,QAAM,gBAAgB,MAAM,WAAW,OAAO;AAC9C,QAAM,eAAW,qBAAQ,KAAK,iBAAiB;AAC/C,WAAS,UAAU,eAAe,SAAS;AAC/C;AAPe;AAQf,eAAe,eAAe,MAAM,SAAS,WAAW;AACpD,QAAM,UAAM,qBAAQ,QAAQ,IAAI,GAAG,wBAAwB;AAC3D,wBAAsB,GAAG;AACzB,QAAM,gBAAgB,MAAM,WAAW,OAAO;AAC9C,QAAM,eAAW,qBAAQ,KAAK,GAAG,eAAe,IAAI,CAAC,gBAAgB;AACrE,WAAS,UAAU,eAAe,SAAS;AAC/C;AANe;AAOf,eAAsB,qBAAqB,YAAY,OAAO;AAC1D,MAAI,CAAC,qBAAO,MAAM,WAAW;AACzB,UAAM,IAAI,MAAM,2EAA2E;AAAA,EAC/F;AACA,QAAM,SAAS,qBAAO,KAAK,UAAU;AACrC,QAAM,WAAW,gBAAgB;AACjC,aAAW,SAAS,QAAQ;AACxB,UAAM,UAAU,SAAS;AAAA,MACrB,MAAM,MAAM;AAAA,MACZ,OAAO,eAAe,MAAM,IAAI;AAAA,IACpC,CAAC;AACD,UAAM,eAAe,MAAM,MAAM,SAAS,SAAS;AAAA,EACvD;AACA,QAAM,gBAAgB,SAAS;AAC/B,UAAQ,IAAI,sCAAsC;AACtD;AAfsB;",
  "names": ["Handlebars"]
}
